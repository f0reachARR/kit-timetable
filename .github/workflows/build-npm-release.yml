name: Build release build and publish to the registry

on:
  push:
    branches: "master"

jobs:
  publish-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
        registry-url: 'https://npm.pkg.github.com/'
    - uses: actions/cache@v1
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Setup git
      run: |
        git remote set-url --push origin https://${{ github.actor }}:$GITHUB_TOKEN@github.com/${{ github.repository }}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install packages
      run: yarn install --frozen-lockfile
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build (production)
      run: yarn lerna run --stream build
      env:
        NODE_ENV: production

    - name: Publish release version
      run: |
        yarn lerna publish from-git --yes
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push-docker:
    runs-on: ubuntu-latest
    needs:
      publish-release:
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Docker login
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Build and push image
      run: |
        IMAGE_ID=`echo "docker.pkg.github.com/${{ github.repository }}" | tr '[A-Z]' '[a-z]'`
        VERSION=$(jq -r ".version" lerna.json)

        docker build ./docker --squash --build-arg VERSION=$VERSION --tag $IMAGE_ID/kit-timetable-server:$VERSION
        docker push $IMAGE_ID/kit-timetable-server:$VERSION
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
